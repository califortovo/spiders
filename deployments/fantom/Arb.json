{
  "address": "0x437b25bB7A5B7889B0bD8d87A709b4D6fEFCb0e5",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenContractAddress",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_token0Balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_token1Balance",
          "type": "uint256"
        }
      ],
      "name": "dT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "estDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getAOM",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recoverEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "recoverToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xaf3f1cb61afc3e6db97021996e4be673ecd32005471a56fde5347c3ed9b67891",
  "receipt": {
    "to": null,
    "from": "0x0c9DAbe91902d00f2e31BDfd9210cC23B20832d7",
    "contractAddress": "0x437b25bB7A5B7889B0bD8d87A709b4D6fEFCb0e5",
    "transactionIndex": 6,
    "gasUsed": "1219316",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080100000000000000000000000000001000000000002000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000004000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0003a0ad00000e25c515f68fffb7a94122809d03bb7d989f52e54dc1255d8bd3",
    "transactionHash": "0xaf3f1cb61afc3e6db97021996e4be673ecd32005471a56fde5347c3ed9b67891",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 68452188,
        "transactionHash": "0xaf3f1cb61afc3e6db97021996e4be673ecd32005471a56fde5347c3ed9b67891",
        "address": "0x437b25bB7A5B7889B0bD8d87A709b4D6fEFCb0e5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000c9dabe91902d00f2e31bdfd9210cc23b20832d7"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0x0003a0ad00000e25c515f68fffb7a94122809d03bb7d989f52e54dc1255d8bd3"
      }
    ],
    "blockNumber": 68452188,
    "cumulativeGasUsed": "3457219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c8ce65a12d5ad061da55d470beee4061",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_token0Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_token1Balance\",\"type\":\"uint256\"}],\"name\":\"dT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"estDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getAOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Arb.sol\":\"Arb\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Arb.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"./interfaces/IERC20.sol\\\";\\nimport {IUniswapV2Router} from \\\"./interfaces/IUniswapV2Router.sol\\\";\\n\\ncontract Arb is Ownable {\\n    function swap(\\n        address _router,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amount\\n    ) public {\\n        IERC20(_tokenIn).approve(_router, _amount);\\n\\n        address[] memory path;\\n        path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        uint deadline = block.timestamp + 30; // leave block.timestamp\\n        IUniswapV2Router(_router).swapExactTokensForTokens(\\n            _amount,\\n            1,\\n            path,\\n            address(this),\\n            deadline\\n        );\\n    }\\n\\n    function getAOM(\\n        address router,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n        uint256[] memory amountOutMins = IUniswapV2Router(router).getAmountsOut(\\n            _amount,\\n            path\\n        );\\n        return amountOutMins[path.length - 1];\\n    }\\n\\n    function estDT(\\n        address _router0,\\n        address _router1,\\n        address _token0,\\n        address _token1,\\n        uint256 _amount\\n    ) external view returns (uint256) {\\n        uint256 amtBack1 = getAOM(_router0, _token0, _token1, _amount);\\n        uint256 amtBack2 = getAOM(_router1, _token1, _token0, amtBack1);\\n        return amtBack2;\\n    }\\n\\n    function dT(\\n        address _router0,\\n        address _router1,\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Balance,\\n        uint256 _token1Balance\\n    ) external onlyOwner {\\n        swap(_router0, _token0, _token1, _token0Balance);\\n        uint256 tradeableAmount = IERC20(_token1).balanceOf(address(this)) -\\n            _token1Balance;\\n        swap(_router1, _token1, _token0, tradeableAmount);\\n        uint256 _token0EndBalance = IERC20(_token0).balanceOf(address(this));\\n        require(_token0EndBalance < _token0Balance, \\\":(\\\");\\n    }\\n\\n    function balanceOf(\\n        address _tokenContractAddress\\n    ) external view returns (uint256) {\\n        uint balance = IERC20(_tokenContractAddress).balanceOf(address(this));\\n        return balance;\\n    }\\n\\n    function recoverEth() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function recoverToken(address tokenAddress) external onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        token.transfer(msg.sender, token.balanceOf(address(this)));\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa4d57c2e4dd23d7135a31a3a928c1fca05385252dd0b6739babe894179bcca19\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.18;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xdcff2d25fb4081ac8853d6d671d4fa6d97a8c2dffa177ed5d4f45f6f0368d1c4\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n\\n    function quote(\\n        uint amountA,\\n        uint reserveA,\\n        uint reserveB\\n    ) external pure returns (uint amountB);\\n\\n    function getAmountOut(\\n        uint amountIn,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountOut);\\n\\n    function getAmountIn(\\n        uint amountOut,\\n        uint reserveIn,\\n        uint reserveOut\\n    ) external pure returns (uint amountIn);\\n\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint amountOut,\\n        address[] calldata path\\n    ) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x37388b48ad70807e5c7ea20004f5901e63593c54efcb20bc068d00a9dd64a77a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6114a68061010d6000396000f3fe6080604052600436106100955760003560e01c80639be65a60116100595780639be65a601461019a578063a9678a18146101c3578063bcdb446b146101ec578063cc5018cb14610203578063f2fde38b1461022c5761009c565b80633176f102146100a157806370a08231146100de578063715018a61461011b5780638da5cb5b146101325780639725389d1461015d5761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610c40565b610255565b6040516100d59190610cb6565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610cd1565b6103fb565b6040516101129190610cb6565b60405180910390f35b34801561012757600080fd5b50610130610483565b005b34801561013e57600080fd5b50610147610497565b6040516101549190610d0d565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610d28565b6104c0565b6040516101919190610cb6565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc9190610cd1565b6104ef565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610c40565b6105f8565b005b3480156101f857600080fd5b50610201610807565b005b34801561020f57600080fd5b5061022a60048036038101906102259190610da3565b610858565b005b34801561023857600080fd5b50610253600480360381019061024e9190610cd1565b6109cb565b005b600080600267ffffffffffffffff81111561027357610272610e30565b5b6040519080825280602002602001820160405280156102a15781602001602082028036833780820191505090505b50905084816000815181106102b9576102b8610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160018151811061030857610307610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85846040518363ffffffff1660e01b815260040161037f929190610f4c565b600060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103c591906110bb565b905080600183516103d69190611133565b815181106103e7576103e6610e5f565b5b602002602001015192505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104379190610d0d565b602060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190611167565b905080915050919050565b61048b610a4e565b6104956000610acc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806104cf87868686610255565b905060006104df87868885610255565b9050809250505095945050505050565b6104f7610a4e565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105529190610d0d565b602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611167565b6040518363ffffffff1660e01b81526004016105b0929190611194565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f391906111f5565b505050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401610633929190611194565b6020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906111f5565b506060600267ffffffffffffffff81111561069457610693610e30565b5b6040519080825280602002602001820160405280156106c25781602001602082028036833780820191505090505b50905083816000815181106106da576106d9610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061072957610728610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000601e426107729190611222565b90508573ffffffffffffffffffffffffffffffffffffffff166338ed17398460018530866040518663ffffffff1660e01b81526004016107b695949392919061129b565b6000604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107fe91906110bb565b50505050505050565b61080f610a4e565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610855573d6000803e3d6000fd5b50565b610860610a4e565b61086c868585856105f8565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108a89190610d0d565b602060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190611167565b6108f39190611133565b9050610901868587846105f8565b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161093c9190610d0d565b602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190611167565b90508381106109c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b890611352565b60405180910390fd5b5050505050505050565b6109d3610a4e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a39906113e4565b60405180910390fd5b610a4b81610acc565b50565b610a56610b90565b73ffffffffffffffffffffffffffffffffffffffff16610a74610497565b73ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190611450565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bd782610bac565b9050919050565b610be781610bcc565b8114610bf257600080fd5b50565b600081359050610c0481610bde565b92915050565b6000819050919050565b610c1d81610c0a565b8114610c2857600080fd5b50565b600081359050610c3a81610c14565b92915050565b60008060008060808587031215610c5a57610c59610ba2565b5b6000610c6887828801610bf5565b9450506020610c7987828801610bf5565b9350506040610c8a87828801610bf5565b9250506060610c9b87828801610c2b565b91505092959194509250565b610cb081610c0a565b82525050565b6000602082019050610ccb6000830184610ca7565b92915050565b600060208284031215610ce757610ce6610ba2565b5b6000610cf584828501610bf5565b91505092915050565b610d0781610bcc565b82525050565b6000602082019050610d226000830184610cfe565b92915050565b600080600080600060a08688031215610d4457610d43610ba2565b5b6000610d5288828901610bf5565b9550506020610d6388828901610bf5565b9450506040610d7488828901610bf5565b9350506060610d8588828901610bf5565b9250506080610d9688828901610c2b565b9150509295509295909350565b60008060008060008060c08789031215610dc057610dbf610ba2565b5b6000610dce89828a01610bf5565b9650506020610ddf89828a01610bf5565b9550506040610df089828a01610bf5565b9450506060610e0189828a01610bf5565b9350506080610e1289828a01610c2b565b92505060a0610e2389828a01610c2b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ec381610bcc565b82525050565b6000610ed58383610eba565b60208301905092915050565b6000602082019050919050565b6000610ef982610e8e565b610f038185610e99565b9350610f0e83610eaa565b8060005b83811015610f3f578151610f268882610ec9565b9750610f3183610ee1565b925050600181019050610f12565b5085935050505092915050565b6000604082019050610f616000830185610ca7565b8181036020830152610f738184610eee565b90509392505050565b600080fd5b6000601f19601f8301169050919050565b610f9b82610f81565b810181811067ffffffffffffffff82111715610fba57610fb9610e30565b5b80604052505050565b6000610fcd610b98565b9050610fd98282610f92565b919050565b600067ffffffffffffffff821115610ff957610ff8610e30565b5b602082029050602081019050919050565b600080fd5b60008151905061101e81610c14565b92915050565b600061103761103284610fde565b610fc3565b9050808382526020820190506020840283018581111561105a5761105961100a565b5b835b81811015611083578061106f888261100f565b84526020840193505060208101905061105c565b5050509392505050565b600082601f8301126110a2576110a1610f7c565b5b81516110b2848260208601611024565b91505092915050565b6000602082840312156110d1576110d0610ba2565b5b600082015167ffffffffffffffff8111156110ef576110ee610ba7565b5b6110fb8482850161108d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113e82610c0a565b915061114983610c0a565b925082820390508181111561116157611160611104565b5b92915050565b60006020828403121561117d5761117c610ba2565b5b600061118b8482850161100f565b91505092915050565b60006040820190506111a96000830185610cfe565b6111b66020830184610ca7565b9392505050565b60008115159050919050565b6111d2816111bd565b81146111dd57600080fd5b50565b6000815190506111ef816111c9565b92915050565b60006020828403121561120b5761120a610ba2565b5b6000611219848285016111e0565b91505092915050565b600061122d82610c0a565b915061123883610c0a565b92508282019050808211156112505761124f611104565b5b92915050565b6000819050919050565b6000819050919050565b600061128561128061127b84611256565b611260565b610c0a565b9050919050565b6112958161126a565b82525050565b600060a0820190506112b06000830188610ca7565b6112bd602083018761128c565b81810360408301526112cf8186610eee565b90506112de6060830185610cfe565b6112eb6080830184610ca7565b9695505050505050565b600082825260208201905092915050565b7f3a28000000000000000000000000000000000000000000000000000000000000600082015250565b600061133c6002836112f5565b915061134782611306565b602082019050919050565b6000602082019050818103600083015261136b8161132f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113ce6026836112f5565b91506113d982611372565b604082019050919050565b600060208201905081810360008301526113fd816113c1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061143a6020836112f5565b915061144582611404565b602082019050919050565b600060208201905081810360008301526114698161142d565b905091905056fea26469706673582212205631d3b142fee1b682764e45cb943bcdb618c6facedb38d79ef2205ae7fa615764736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100955760003560e01c80639be65a60116100595780639be65a601461019a578063a9678a18146101c3578063bcdb446b146101ec578063cc5018cb14610203578063f2fde38b1461022c5761009c565b80633176f102146100a157806370a08231146100de578063715018a61461011b5780638da5cb5b146101325780639725389d1461015d5761009c565b3661009c57005b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610c40565b610255565b6040516100d59190610cb6565b60405180910390f35b3480156100ea57600080fd5b5061010560048036038101906101009190610cd1565b6103fb565b6040516101129190610cb6565b60405180910390f35b34801561012757600080fd5b50610130610483565b005b34801561013e57600080fd5b50610147610497565b6040516101549190610d0d565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610d28565b6104c0565b6040516101919190610cb6565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc9190610cd1565b6104ef565b005b3480156101cf57600080fd5b506101ea60048036038101906101e59190610c40565b6105f8565b005b3480156101f857600080fd5b50610201610807565b005b34801561020f57600080fd5b5061022a60048036038101906102259190610da3565b610858565b005b34801561023857600080fd5b50610253600480360381019061024e9190610cd1565b6109cb565b005b600080600267ffffffffffffffff81111561027357610272610e30565b5b6040519080825280602002602001820160405280156102a15781602001602082028036833780820191505090505b50905084816000815181106102b9576102b8610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838160018151811061030857610307610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85846040518363ffffffff1660e01b815260040161037f929190610f4c565b600060405180830381865afa15801561039c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103c591906110bb565b905080600183516103d69190611133565b815181106103e7576103e6610e5f565b5b602002602001015192505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104379190610d0d565b602060405180830381865afa158015610454573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104789190611167565b905080915050919050565b61048b610a4e565b6104956000610acc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806104cf87868686610255565b905060006104df87868885610255565b9050809250505095945050505050565b6104f7610a4e565b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105529190610d0d565b602060405180830381865afa15801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190611167565b6040518363ffffffff1660e01b81526004016105b0929190611194565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f391906111f5565b505050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401610633929190611194565b6020604051808303816000875af1158015610652573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067691906111f5565b506060600267ffffffffffffffff81111561069457610693610e30565b5b6040519080825280602002602001820160405280156106c25781602001602082028036833780820191505090505b50905083816000815181106106da576106d9610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828160018151811061072957610728610e5f565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000601e426107729190611222565b90508573ffffffffffffffffffffffffffffffffffffffff166338ed17398460018530866040518663ffffffff1660e01b81526004016107b695949392919061129b565b6000604051808303816000875af11580156107d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107fe91906110bb565b50505050505050565b61080f610a4e565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610855573d6000803e3d6000fd5b50565b610860610a4e565b61086c868585856105f8565b6000818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108a89190610d0d565b602060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190611167565b6108f39190611133565b9050610901868587846105f8565b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161093c9190610d0d565b602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190611167565b90508381106109c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b890611352565b60405180910390fd5b5050505050505050565b6109d3610a4e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a39906113e4565b60405180910390fd5b610a4b81610acc565b50565b610a56610b90565b73ffffffffffffffffffffffffffffffffffffffff16610a74610497565b73ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190611450565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bd782610bac565b9050919050565b610be781610bcc565b8114610bf257600080fd5b50565b600081359050610c0481610bde565b92915050565b6000819050919050565b610c1d81610c0a565b8114610c2857600080fd5b50565b600081359050610c3a81610c14565b92915050565b60008060008060808587031215610c5a57610c59610ba2565b5b6000610c6887828801610bf5565b9450506020610c7987828801610bf5565b9350506040610c8a87828801610bf5565b9250506060610c9b87828801610c2b565b91505092959194509250565b610cb081610c0a565b82525050565b6000602082019050610ccb6000830184610ca7565b92915050565b600060208284031215610ce757610ce6610ba2565b5b6000610cf584828501610bf5565b91505092915050565b610d0781610bcc565b82525050565b6000602082019050610d226000830184610cfe565b92915050565b600080600080600060a08688031215610d4457610d43610ba2565b5b6000610d5288828901610bf5565b9550506020610d6388828901610bf5565b9450506040610d7488828901610bf5565b9350506060610d8588828901610bf5565b9250506080610d9688828901610c2b565b9150509295509295909350565b60008060008060008060c08789031215610dc057610dbf610ba2565b5b6000610dce89828a01610bf5565b9650506020610ddf89828a01610bf5565b9550506040610df089828a01610bf5565b9450506060610e0189828a01610bf5565b9350506080610e1289828a01610c2b565b92505060a0610e2389828a01610c2b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610ec381610bcc565b82525050565b6000610ed58383610eba565b60208301905092915050565b6000602082019050919050565b6000610ef982610e8e565b610f038185610e99565b9350610f0e83610eaa565b8060005b83811015610f3f578151610f268882610ec9565b9750610f3183610ee1565b925050600181019050610f12565b5085935050505092915050565b6000604082019050610f616000830185610ca7565b8181036020830152610f738184610eee565b90509392505050565b600080fd5b6000601f19601f8301169050919050565b610f9b82610f81565b810181811067ffffffffffffffff82111715610fba57610fb9610e30565b5b80604052505050565b6000610fcd610b98565b9050610fd98282610f92565b919050565b600067ffffffffffffffff821115610ff957610ff8610e30565b5b602082029050602081019050919050565b600080fd5b60008151905061101e81610c14565b92915050565b600061103761103284610fde565b610fc3565b9050808382526020820190506020840283018581111561105a5761105961100a565b5b835b81811015611083578061106f888261100f565b84526020840193505060208101905061105c565b5050509392505050565b600082601f8301126110a2576110a1610f7c565b5b81516110b2848260208601611024565b91505092915050565b6000602082840312156110d1576110d0610ba2565b5b600082015167ffffffffffffffff8111156110ef576110ee610ba7565b5b6110fb8482850161108d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061113e82610c0a565b915061114983610c0a565b925082820390508181111561116157611160611104565b5b92915050565b60006020828403121561117d5761117c610ba2565b5b600061118b8482850161100f565b91505092915050565b60006040820190506111a96000830185610cfe565b6111b66020830184610ca7565b9392505050565b60008115159050919050565b6111d2816111bd565b81146111dd57600080fd5b50565b6000815190506111ef816111c9565b92915050565b60006020828403121561120b5761120a610ba2565b5b6000611219848285016111e0565b91505092915050565b600061122d82610c0a565b915061123883610c0a565b92508282019050808211156112505761124f611104565b5b92915050565b6000819050919050565b6000819050919050565b600061128561128061127b84611256565b611260565b610c0a565b9050919050565b6112958161126a565b82525050565b600060a0820190506112b06000830188610ca7565b6112bd602083018761128c565b81810360408301526112cf8186610eee565b90506112de6060830185610cfe565b6112eb6080830184610ca7565b9695505050505050565b600082825260208201905092915050565b7f3a28000000000000000000000000000000000000000000000000000000000000600082015250565b600061133c6002836112f5565b915061134782611306565b602082019050919050565b6000602082019050818103600083015261136b8161132f565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006113ce6026836112f5565b91506113d982611372565b604082019050919050565b600060208201905081810360008301526113fd816113c1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061143a6020836112f5565b915061144582611404565b602082019050919050565b600060208201905081810360008301526114698161142d565b905091905056fea26469706673582212205631d3b142fee1b682764e45cb943bcdb618c6facedb38d79ef2205ae7fa615764736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Arb.sol:Arb",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}